nuget package - web api - authentication jwt bearer asp net core
installers - web api - clas Identity installer po IInstaller
scheme add authentication = > options - default scheme ,  challenge scheme, scheme
.addjwtbearer - options - tokenvalidationparameters, validateIssuer, ValidateAudience - secret key - symmetricesecurityKey
utf84
 public void InstallServices(IServiceCollection services, IConfiguration configuration)
        {
            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;

            })
                .AddJwtBearer(options => 
                {
                    options.TokenValidationParameters = new TokenValidationParameters()
                    {
                        ValidateIssuer = false,
                        ValidateAudience = false,
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["JWT:Secret"]))
                    };
                }  );
        }

        next - appsetings json :

          "JWT": {
    "Secret": "BEAA72FDDF3244968CB8D03CED10D848"  //  tools - create guid - clean it
  },


  -- transfer key to identity installer -> configuration["JWT:Secret"]


  L5 - rejestracja uzytkownika

  Nuget - infrastructure! - aspnetcore identity + identityentityframeworkcore

  infrastructure - folder identity - applicaitonuser cs

  dziedziczenie

  CPSContext - zmiana dziedziczenia  na identity db context application user :

   public class CPSContext : IdentityDbContext <ApplicationUser> 
    {
        public CPSContext(  DbContextOptions<CPSContext> options) : base(options)  // tu dodane dla identity ! 
        {
        }
        ...

        nastepnie rejesdtrujemy usluge w identity installer 
             services.AddIdentity<ApplicationUser, IdentityRole>()
                .AddEntityFrameworkStores<CPSContext>()
                .AddDefaultTokenProviders();
 obsluguje to EF wiec trzeba dodac miggracje i eksportowac tabele 
 
 nowy controller dla identityt 

  w czasie tworzsenia metody rejestracji tworzymy klase ktora bedzie potrzebna do przekazania danych uzytkownika id name email
  - dlatego ze ona nie jest nigdzye dalej uzywana mozna ja stworzyc w web api namespace - WebApi.Models   public class RegisterModel

  implementacja kontrollera

  l6
  logowanie 
  loggin w kontrollerze 

  klasa modelu do wykorzystania danych potrzebnych do logowania  loginmodel.cs
  w login method sprawdzasz istnienie i haslo jezeli istnieje generujesz token do wykorzystania w logowani 

  l7 zabezpieczenia dostepu
  w itementity controlller dodajesz atrybut authorize  [authorize]

  mvc installer - rejestracja serwisu add authentication

  startup app use aauthentication 

  allow anynamous - pod akcja ponad typem operacji w controllerze 

  od 3 min dodajemy autora danej tresci
  
... ni wiem tu caly motyw z porownaniem username string aby weryfikowac wlasciciela tresci



  userresolverService - aby dodac lastmodifiedBY i createdBY
  - service w mvc installer

  ---- USER ROLES L8

  new class - infrastructure - identity folder - User Roles
  const string fields 

  identityController - nowe pole private -   private readonly RoleManager <IdentityRole> _roleManager;

  (rejestracja:)
   if (!await _roleManager.RoleExistsAsync(UserRoles.User))
            { 
                await _roleManager.CreateAsync(new IdentityRole(UserRoles.User)); //  Microsoft.AspNetCore.Identity
            }
            //dodajemy role user do uzytkownika 
            await _userManager.AddToRoleAsync(user, UserRoles.User);
            ///----- endroles

(login:)



